package knowledgestructureelements;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class CompetenceStructure {
	public List<Competence> competences = new ArrayList<Competence>();
	private Boolean containsCircles = null;
	
	public CompetenceStructure(){}

	public CompetenceStructure(String xml) throws ParserConfigurationException, SAXException, IOException{
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		Document doc = null;
		builder = factory.newDocumentBuilder();		
		StringBuilder xmlStringBuilder = new StringBuilder();
		xmlStringBuilder.append(xml);
		ByteArrayInputStream input =  new ByteArrayInputStream(xmlStringBuilder.toString().getBytes("UTF-8"));
		doc = builder.parse(input);
		String type = doc.getElementsByTagName("type").item(0).getFirstChild().getNodeValue();

	}
	
	public boolean addEdge(String fromName, String toName, double weight){
		Competence from = getCompetenceByName(fromName);
		Competence to = getCompetenceByName(toName);
		if(from == null || to == null)
			System.out.print("ERROR - competence not found!('"+fromName+"' OR '"+toName+"')");
		Edge edge = new Edge(from, to, weight);
		if(from.addSuccessor(edge)){
			if(to.addPrerequisite(edge)){
				return true;
			}
			else{
				from.removeSuccessor(edge);
				return false;
			}
		}
		else
			return false;
	}
	
	public boolean addCompetence(Competence competence){
		if(getCompetenceByName(competence.name)==null){
			competences.add(competence);
			return true;
		}
		return false;
	}
	
	public Competence getCompetenceByName(String name){
		for(Competence competence: competences)
			if(competence.name.equals(name))
				return competence;
		return null;
	}

	public String getDiagnosticString(){
		String str = "Print out competence structure:\n";
		for(Competence competence : competences)
			str += competence.getDiagnosticString();
		return str;
	}
	
	public List<Competence> getAllIndirectPrerequisites(Competence competence){
		if(containsCircles()){
			System.out.println("Method getAllIndirectPrerequisites not callable - structure contains circles!");
			return null;
		}
		
		if(competence.prerequisites.size()==0)
			return new ArrayList<Competence>();
		List<Competence> prerequisites = new ArrayList<Competence>();
		for(Edge edge : competence.prerequisites){
			if(!prerequisites.contains(edge.from)){
				prerequisites.add(edge.from);
				for(Competence prereq : getAllIndirectPrerequisites(edge.from)){
					if(!prerequisites.contains(prereq)){
						prerequisites.add(prereq);
					}
				}
			}
		}
		return prerequisites;
	}
	
	public int getTotalNumberOfPrerequisites(Competence competence){
		return getAllIndirectPrerequisites(competence).size();
	}

	public boolean containsCircles(){
		if(containsCircles != null)
			return containsCircles;
		for(Competence competence : competences){
			List<Competence> allPrerequisites = new ArrayList<Competence>();
			allPrerequisites.add(competence);
			while(allPrerequisites.size()>0){
				Competence comp = allPrerequisites.remove(0);
				if(comp.equals(competence)){
					containsCircles=true;
					return true;
				}
				for(Edge edge : comp.prerequisites)
					allPrerequisites.add(edge.from);
			}
		}
		containsCircles= false;
		return false;
	}

	public CompetenceState updateCompetenceState(CompetenceState currentCompetenecstate, Boolean success){
		return null;
	}

	//are all competences linked (5)
	//weights sum up to 1 (3)
	public int isDataValid(){
		int retVal = 1;
		
		for(Competence competence : competences){
			Double weight = 0.0;
			for(Edge edge : competence.prerequisites){
				weight += edge.weight;
			}
			if(weight>1){
				retVal = retVal *3; 
			}
			if(competence.prerequisites.size()==0 && competence.successors.size() ==0){
				retVal = retVal *5;
			}
		}
		
		return retVal;
	}

	public String toXML(){
		String xml="<competences>";
		for(Competence competence : competences){
			xml+=competence.toXML();
		}
		xml+="</competences>";
		return xml;
	}
}
