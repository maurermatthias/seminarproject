package test2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import entities.DBcompetence;
import entities.DBcompetencestructure;
import entities.DBcompetencevalue;
import entities.DBentity;
import entities.DBlinkagetaskcompetence;
import entities.DBtask;
import entities.DBuser;




public class DBConnector {
	//admin-login-data
	static private String adminName = "admin";
	static private String adminPwd = "admin";
	static private String teacherName = "teacher";
	static private String teacherPwd = "teacher";

	//static private String dbName = "db1";
	private static String userName = "java2";
	private static String password = "java3";
	private static String dbUrl = "jdbc:mysql://localhost/db2";
	
	//singelton instance
	private static DBConnector instance;
	
	//table identifier
	String[] tableIdentifier = {"users","competences","tasks","competencestructures",
			"classes","competencevalues","linkagetaskcompetence","competenceweights",
			"linkageclasstask","linkageclasscstructure","registeredstudents"};
	
	//private constructor
	private DBConnector() {
	}
	
	//get connection to DB
	public static Connection getConnection(){

		Connection conn = null;
		try{
		    Class.forName("com.mysql.jdbc.Driver");
		    conn = DriverManager.getConnection(dbUrl,userName,password);
		}catch (SQLException | ClassNotFoundException ex) {
		    System.out.println("Not connected to database");
		} 
	    return conn;
	}
	
	//singelton getter
	public static DBConnector getInstance() {
		if (instance == null) {
			instance = new DBConnector();
			if(usernameFree(adminName))
				addNewUser("",adminName,3,adminPwd);
			
			if(usernameFree(teacherName))
				addNewUser("",teacherName,2,teacherPwd);
			
		}
		return instance;
	}

	///Methods for User-DB
	//check if username already exists
	public static boolean usernameFree(String name){
		
        String cmd = "SELECT * from Users where name = '"+name+"'";
        List<DBentity> rs = executeCommand(cmd,"Users");
        
        if (rs.isEmpty())   
        	return true;
		
		return false;
	}
	
	//add new user
	public static void addNewUser(String creator, String name, Integer usergroup, String pwd) {
		if(usernameFree(name)){
			String cmd = "INSERT INTO Users (creator,name,usergroup,password) VALUES (\""+creator
					+"\",\""+name+"\","+usergroup+",\""+pwd+"\");";
			executeCommand(cmd,null);
			System.out.println("New user \""+name+"\" inserted.");
		}
		else{
			System.out.println("Adding new user not possible - username already exists!");
		}
	}
	
	//execute a select command
	public List<DBentity> select(String table, String where){
		Statement stmt = null;
		ResultSet rs = null;
		List<DBentity> results = new ArrayList<DBentity>();
		
		String cmd;
		if(where == null)
			cmd = "SELECT * FROM "+table;
		else
			cmd = "SELECT * FROM "+table+"WHERE "+where;
		
		try{
			Connection con = getConnection();
		    stmt = con.createStatement();
		    stmt.execute(cmd);
		    rs = stmt.getResultSet();
		    
		    switch(table){
			    case "users":
		        	while(rs.next()){
		        		DBuser ue = new DBuser();
		        		ue.userid = rs.getInt("userid");
		        		ue.usergroup = rs.getInt("usergroup");
		        		ue.name = rs.getString("name");
		        		ue.creator = rs.getString("creator");
		        		ue.password = rs.getString("password");
		        		results.add(ue);
		        	}
			    	break;
			    case "competencevalues":
		        	while(rs.next()){
		        		DBcompetencevalue cv = new DBcompetencevalue();
		        		cv.classid = rs.getInt("classid");
		        		cv.competenceid = rs.getInt("competenceid");
		        		cv.id = rs.getInt("id");
		        		cv.studentid = rs.getInt("studentid");
		        		cv.value = rs.getDouble("value");
		        		results.add(cv);
		        	}
			    	break;
			    case "competences":
		        	while(rs.next()){
		        		DBcompetence c = new DBcompetence();
		        		c.competenceid = rs.getInt("competenceid");
		        		c.creator = rs.getInt("creator");
		        		c.name = rs.getString("name");
		        		c.description = rs.getString("description");
		        		c.visibility = rs.getString("visibility");
		        		results.add(c);
		        	}
			    	break;
			    case "tasks":
		        	while(rs.next()){
		        		DBtask t = new DBtask();
		        		t.taskid = rs.getInt("taskid");
		        		t.creator = rs.getInt("creator");
		        		t.name = rs.getString("name");
		        		t.description = rs.getString("description");
		        		t.visibility = rs.getString("visibility");
		        		t.text = rs.getString("text");
		        		t.answer = rs.getString("answer");
		        		results.add(t);
		        	}
			    	break;
			    case "linkagetaskcompetence":
		        	while(rs.next()){
		        		DBlinkagetaskcompetence ltc = new DBlinkagetaskcompetence();
		        		ltc.id = rs.getInt("id");
		        		ltc.taskid = rs.getInt("taskid");
		        		ltc.competenceid = rs.getInt("competenceid");
		        		ltc.weight = rs.getDouble("weight");
		        		results.add(ltc);
		        	}
			    	break;
			    case "competencestructures":
		        	while(rs.next()){
		        		DBcompetencestructure cs = new DBcompetencestructure();
		        		cs.cstructureid = rs.getInt("cstructureid");
		        		cs.creator = rs.getInt("creator");
		        		cs.name = rs.getString("creator");
		        		cs.description = rs.getString("description");
		        		cs.visibility = rs.getString("visibility");
		        		results.add(cs);
		        	}
			    	break;
		    }
		    
		    
		}catch(SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());
		}
		finally {

		    if (rs != null) {
		        try {
		            rs.close();
		        } catch (SQLException sqlEx) { } // ignore

		        rs = null;
		    }
		    if (stmt != null) {
		        try {
		            stmt.close();
		        } catch (SQLException sqlEx) { } // ignore

		        stmt = null;
		    }
		}
		
		return results;
	}
	
	//Executes an SQL command, returns the result-set, if command was SELECT
 	public static List<DBentity> executeCommand(String cmd, String selectClass){
		Statement stmt = null;
		ResultSet rs = null;
		List<DBentity> results = new ArrayList<DBentity>();

		try {
			Connection con = getConnection();
		    stmt = con.createStatement();

		    if (stmt.execute(cmd)) {
		        rs = stmt.getResultSet();
		        if(selectClass == null){
		        	
		        }
		        else if(selectClass=="Users"){
		        	while(rs.next()){
		        		DBuser ue = new DBuser();
		        		ue.userid = rs.getInt("userid");
		        		ue.usergroup = rs.getInt("usergroup");
		        		ue.name = rs.getString("name");
		        		ue.creator = rs.getString("creator");
		        		ue.password = rs.getString("password");
		        		results.add(ue);
		        	}
		        }else{
		        	System.out.println("Class for select unknown/not implemented!");
		        }
		    }

		}
		catch (SQLException ex){
		    // handle any errors
		    System.out.println("SQLException: " + ex.getMessage());
		    System.out.println("SQLState: " + ex.getSQLState());
		    System.out.println("VendorError: " + ex.getErrorCode());
		}
		finally {

		    if (rs != null) {
		        try {
		            rs.close();
		        } catch (SQLException sqlEx) { } // ignore

		        rs = null;
		    }
		    if (stmt != null) {
		        try {
		            stmt.close();
		        } catch (SQLException sqlEx) { } // ignore

		        stmt = null;
		    }
		}

	    return results;
	}
	
	public void createTable(String type){
        String usertable = "";
        
        switch(type){
	        case "users":
	            usertable += "CREATE TABLE IF NOT EXISTS Users (" 
	                    + "userid INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "creator TEXT," 
	                    + "name TEXT,"  
	                    + "usergroup INT(2),"  
	                    + "password TEXT,"
	                    + "PRIMARY KEY (userid))"; 
	            break;
	        case "competences":
	            usertable += "CREATE TABLE IF NOT EXISTS Competences (" 
	                    + "competenceid INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "creator TEXT," 
	                    + "name TEXT,"  
	                    + "describtion TEXT,"  
	                    + "visibility TEXT,"
	                    //+ "FOREIGN KEY (creator) REFERENCES Users(userid) ON DELETE CASCADE," 
	                    + "PRIMARY KEY (competenceid))"; 
	            break;
	        case "tasks":
	            usertable += "CREATE TABLE IF NOT EXISTS Tasks (" 
	                    + "taskid INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "creator TEXT," 
	                    + "name TEXT,"  
	                    + "describtion TEXT,"  
	                    + "visibility TEXT,"
	                    + "text TEXT,"  
	                    + "answer TEXT,"
	                    //+ "FOREIGN KEY (creator) REFERENCES Users(userid) ON DELETE CASCADE," 
	                    + "PRIMARY KEY (taskid))"; 
	            break;
	        case "competencestructures":
	            usertable += "CREATE TABLE IF NOT EXISTS Competencestructures (" 
	                    + "competencestructureid INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "creator TEXT," 
	                    + "name TEXT,"  
	                    + "describtion TEXT,"  
	                    + "visibility TEXT,"
	                    //+ "FOREIGN KEY (creator) REFERENCES Users(userid) ON DELETE CASCADE," 
	                    + "PRIMARY KEY (competencestructureid))"; 
	            break;
	        case "classes":
	            usertable += "CREATE TABLE IF NOT EXISTS Classes (" 
	                    + "classid INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "creator TEXT," 
	                    + "name TEXT,"  
	                    + "describtion TEXT,"  
	                    + "visibility TEXT,"
	                    //+ "FOREIGN KEY (creator) REFERENCES Users(userid) ON DELETE CASCADE," 
	                    + "PRIMARY KEY (classid))"; 
	            break;
	        case "competencevalues":
	            usertable += "CREATE TABLE IF NOT EXISTS Competencevalues (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "studentid INT(64) NOT NULL," 
	                    + "classid INT(64) NOT NULL,"  
	                    + "competenceid INT(64) NOT NULL,"  
	                    + "value DOUBLE,"
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (studentid) REFERENCES Users(userid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (classid) REFERENCES Classes(classid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (competenceid) REFERENCES Competences(competenceid) ON DELETE CASCADE)";
	            break;
	        case "linkagetaskcompetence":
	            usertable += "CREATE TABLE IF NOT EXISTS Linkagetaskcompetence (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "taskid INT(64) NOT NULL,"  
	                    + "competenceid INT(64) NOT NULL,"  
	                    + "weight DOUBLE,"
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (taskid) REFERENCES Tasks(taskid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (competenceid) REFERENCES Competences(competenceid) ON DELETE CASCADE)";
	            break;
	        case "linkageclasstask":
	            usertable += "CREATE TABLE IF NOT EXISTS Linkageclasstask (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "taskid INT(64) NOT NULL,"  
	                    + "classid INT(64) NOT NULL,"  
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (taskid) REFERENCES Tasks(taskid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (classid) REFERENCES Classes(classid) ON DELETE CASCADE)";
	            break;
	        case "linkageclasscstructure":
	            usertable += "CREATE TABLE IF NOT EXISTS Linkageclasscstructure (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "taskid INT(64) NOT NULL,"  
	                    + "cstructureid INT(64) NOT NULL,"  
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (taskid) REFERENCES Tasks(taskid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (cstructureid) REFERENCES Competencestructures(competencestructureid) ON DELETE CASCADE)";
	            break;
	        case "competenceweights":
	            usertable += "CREATE TABLE IF NOT EXISTS Competenceweights (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "fromcompetenceid INT(64) NOT NULL,"  
	                    + "tocompetenceid INT(64) NOT NULL,"  
	                    + "cstructureid INT(64) NOT NULL,"  
	                    + "weight DOUBLE,"
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (fromcompetenceid) REFERENCES Competences(competenceid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (tocompetenceid) REFERENCES Competences(competenceid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (cstructureid) REFERENCES Competencestructures(competencestructureid) ON DELETE CASCADE)";
	            break;
	        case "registeredstudents":
	            usertable += "CREATE TABLE IF NOT EXISTS Registeredstudents (" 
	                    + "id INT(64) NOT NULL AUTO_INCREMENT,"  
	                    + "classid INT(64) NOT NULL,"  
	                    + "studentid INT(64) NOT NULL,"  
	                    + "PRIMARY KEY (id),"
	                    + "FOREIGN KEY (classid) REFERENCES Classes(classid) ON DELETE CASCADE," 
	                    + "FOREIGN KEY (studentid) REFERENCES Users(userid) ON DELETE CASCADE)";
	            break;
	        default:
	        	System.out.println("Table type "+type+" unknown!");
	        	return;
        }
        
        try {
            Connection con = DBConnector.getConnection();
            Statement statement = (Statement) con.createStatement();
			statement.executeUpdate(usertable);
			con.close();
		} catch (SQLException e) {
			System.out.println("Error when creating table "+type+"!");
			e.printStackTrace();
		}
	}

	public void createTable(){
		for(int i=0;i<this.tableIdentifier.length;i++)
			createTable(this.tableIdentifier[i]);
	}
	
	public void truncateTable(String type){
		String usertable = "";
        
        switch(type){
	        case "users":
	            usertable += "TRUNCATE TABLE Users"; 
	            break;
	        case "competences":
	            usertable += "TRUNCATE TABLE Competences"; 
	            break;
	        case "tasks":
	            usertable += "TRUNCATE TABLE Tasks"; 
	            break;
	        case "competencestructures":
	            usertable += "TRUNCATE TABLE Competencestructure"; 
	            break;
	        case "classes":
	            usertable += "TRUNCATE TABLE Classes"; 
	            break;
	        case "competencevalues":
	            usertable += "TRUNCATE TABLE Competencevalues"; 
	            break;
	        case "linkagetaskcompetence":
	            usertable += "TRUNCATE TABLE Linkagetaskcompetence"; 
	            break;
	        case "competenceweights":
	            usertable += "TRUNCATE TABLE Competenceweights"; 
	            break;
	        case "linkageclasstask":
	            usertable += "TRUNCATE TABLE Linkageclasstask"; 
	            break;
	        case "linkageclasscstructure":
	            usertable += "TRUNCATE TABLE Linkageclasscstructure"; 
	            break;
	        case "registeredstudents":
	            usertable += "TRUNCATE TABLE Registeredstudents"; 
	            break;
	        default:
	        	System.out.println("Table type "+type+" unknown!");
	        	return;
        }
        
        try {
            Connection con = DBConnector.getConnection();
            Statement statement = (Statement) con.createStatement();
			statement.executeUpdate(usertable);
			con.close();
		} catch (SQLException e) {
			System.out.println("Error when truncating table "+type+"!");
			e.printStackTrace();
		}
	}

	public void truncateTable(){
		for(int i=this.tableIdentifier.length-1;i>=0;i--)
			truncateTable(this.tableIdentifier[i]);
	}
	
	public void createEmptyTable(String type){
		dropTable(type);
		createTable(type);
	}
	
	public void createEmptyTable(){
		for(int i=0;i<this.tableIdentifier.length;i++)
			createEmptyTable(this.tableIdentifier[i]);
	}
	
	public void dropTable(String type){
		String usertable = "";
        
        switch(type){
	        case "users":
	            usertable += "DROP TABLE IF EXISTS Users"; 
	            break;
	        case "competences":
	            usertable += "DROP TABLE IF EXISTS Competences"; 
	            break;
	        case "tasks":
	            usertable += "DROP TABLE IF EXISTS Tasks"; 
	            break;
	        case "competencestructures":
	            usertable += "DROP TABLE IF EXISTS Competencestructure"; 
	            break;
	        case "classes":
	            usertable += "DROP TABLE IF EXISTS Classes"; 
	            break;
	        case "competencevalues":
	            usertable += "DROP TABLE IF EXISTS Competencevalues"; 
	            break;
	        case "linkagetaskcompetence":
	            usertable += "DROP TABLE IF EXISTS Linkagetaskcompetence"; 
	            break;
	        case "competenceweights":
	            usertable += "DROP TABLE IF EXISTS Competenceweights"; 
	            break;
	        case "linkageclasstask":
	            usertable += "DROP TABLE IF EXISTS Linkageclasstask"; 
	            break;
	        case "linkageclasscstructure":
	            usertable += "DROP TABLE IF EXISTS Linkageclasscstructure"; 
	            break;
	        case "registeredstudents":
	            usertable += "DROP TABLE IF EXISTS Registeredstudents"; 
	            break;
	        default:
	        	System.out.println("Table type "+type+" unknown!");
	        	return;
        }
        
        try {
            Connection con = DBConnector.getConnection();
            Statement statement = (Statement) con.createStatement();
			statement.executeUpdate(usertable);
			con.close();
		} catch (SQLException e) {
			System.out.println("Error when dropping table "+type+"!");
			e.printStackTrace();
		}
	}

	public void dropTable(){
		for(int i=this.tableIdentifier.length-1;i>=0;i--)
			dropTable(this.tableIdentifier[i]);
	}

}
